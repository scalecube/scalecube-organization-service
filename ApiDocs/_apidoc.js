/**
 * @api {ServiceMethod: create} /organizations/create create
 * @apiName CreateOrganization
 * @apiGroup Organization
 * @apiVersion 2.1.3-SNAPSHOT
 * @apiPermission Request / Response / Error-response
 *
 * @apiDescription This operation enables any user with valid <a href="https://manage.auth0.com/">Token</a> to create the specific organization and store its information (metadata).
 *
 * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
 * @apiParam {String} name Specified organization name
 * @apiParam {String} email Specified organization e-mail
 *
 * @apiSuccess {Object[]} apiKeys List of all API keys (Array of objects) for the relevant organization
 * @apiSuccess {String} id Generated id for the created organization
 * @apiSuccess {String} name Specified organization name
 * @apiSuccess {String} email Specified organization e-mail
 * @apiSuccess {String} ownerId id for clients already generated by relevant authority (Auth0)
 *
 * @apiError {String} field Duplication of the Organization name
 *
 * @apiErrorExample {json} WebSocket
 * Request:
 *     {
 *         "q":"/organizations/create",
 *         "sid": 1,
 *         "d":{
 *               "token": {
 *                           "token":"Auth0-TOKEN"
 *               },
 *               "name":"specifiedOrganizationName",
 *               "email":"specifiedOrganization@email.com"
 *         }
 *     }
 *
 * Response:
 *     {
 *         "q":"/organizations/create",
 *         "sid":1,
 *         "d":{
 *                "apiKeys":[],
 *                "id":"ORG-ID",
 *                "name":"specifiedOrganizationName",
 *                "email":"specifiedOrganization@email.com",
 *                "ownerId":"id@clients"
 *         }
 *
 *     }
 *
 *     {
 *         "sig":1,
 *         "sid":1
 *     }
 *
 * Error Response:
 *     {
 *         "sig":2,
 *         "q":"/io.scalecube.services.error/500",
 *         "sid":1,
 *         "d":{
 *                "errorCode":500,
 *                "errorMessage":"Organization name: 'org name' already in use"
 *         }
 *     }
 *
 * @apiErrorExample {json} RSocket
 * Request:
 *     {
 *         "metadata":{
 *                      "q": "/organizations/create"
 *         },
 *         "data":{
 *                   "token": {
 *                               "token":"Auth0-TOKEN"
 *                   },
 *                   "name":"specifiedOrganizationName",
 *                   "email":"specifiedOrganization@email.com"
 *         }
 *     }
 *
 * Response:
 *     {
 *         "data":{
 *                   "apiKeys":[],
 *                   "id":"ORG-ID",
 *                   "name":"specifiedOrganizationName",
 *                   "email":"specifiedOrganization@email.com",
 *                   "ownerId":"id@clients"
 *         },
 *         "metadata":{
 *           "q": "/organizations/create"
 *         }
 *     }
 *
 * Error Response:
 *     {
 *         "data":{
 *                   "errorCode":500,
 *                   "errorMessage":"Organization name: 'org name' already in use"
 *         },
 *         "metadata":{
 *                      "q":"/io.scalecube.services.error/500"
 *         }
 *     }
 *
 * @apiErrorExample{json} HTTP
 * Request:
 * https://localhost:port/organizations/create (endpoint url)
 *
 * Body:
 *     {
 *        "token": {
 *                     "token":"Auth0-TOKEN"
 *         },
 *         "name":"specifiedOrganizationName",
 *         "email":"specifiedOrganization@email.com"
 *     }
 *
 * Response:
 *     {
 *         "apiKeys":[],
 *         "id":"ORG-ID",
 *         "name":"specifiedOrganizationName",
 *         "email":"specifiedOrganization@email.com",
 *         "ownerId":"id@clients"
 *     }
 *
 * Error Response:
 *     {
 *         "errorCode":500,
 *         "errorMessage":"Organization name: 'org name' already in use"
 *     }
 */{
  "name": "Organization service",
  "version": "2.1.3-SNAPSHOT",
  "description": "Organization service API",
  "title": "API documentation for the Organization Service",
  "template": {
    "forceLanguage" : "en"
  },
  "order": [
    "Overview",
    "GettingStarted",
    "TransportProtocols",
    "InteractiveAPIExplorer",
    "CreateOrganization",
    "GetOrganization",
    "UpdateOrganization",
    "DeleteOrganization",
    "LeaveOrganization",
    "GetUserOrganizationsMembership",
    "InviteMember",
    "GetOrganizationMembers",
    "UpdateOrganizationMemberRole",
    "KickoutMember",
    "AddOrganizationApiKey",
    "DeleteOrganizationApiKey"
  ]
}
/**
  * @api {ServiceMethod: getUserOrganizationsMembership} /organizations/getUserOrganizationsMembership getUserOrganizationsMembership
  * @apiName GetUserOrganizationsMembership
  * @apiGroup Member
  * @apiVersion 2.1.3-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables each organization <b>member</b> to get the list of all relevant organizations (full info) which the member was invited.
  * >Note: this method returns all organization info thus API keys with:
  *  ><br>-all accessible permission levels ("Owner" | "Admin" | "Member") will be returned only for the related Organization Owner
  *  ><br>-"Admin" | "Member" permission levels will be returned only for the related Organization Admin
  *  ><br>-"Member" permission level will be returned only for the related Organization Member
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  *
  * @apiSuccess {Object[]} organizations List of all Organizations (Array of objects) which the member was invited
  * @apiSuccess {Object[]} organizations.apiKeys List of all API keys (Array of objects) for the relevant organization
  * @apiSuccess {String} organizations.id Already generated id for the created organization
  * @apiSuccess {String} organizations.name Organization name
  * @apiSuccess {String} organizations.email Organization e-mail
  * @apiSuccess {String} organizations.ownerId id for clients already generated by relevant authority (Auth0)
  *
  * @apiError {String} field Invalid or expired token
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/getUserOrganizationsMembership",
  *         "sid": 1,
  *         "d":{
  *               "token": {
  *                           "token":"Auth0-TOKEN"
  *               }
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/getUserOrganizationsMembership",
  *         "sid":1,
  *         "d":{
  *                "apiKeys":[],
  *                "id":"ORG-ID",
  *                "name":"specifiedOrganizationName",
  *                "email":"specifiedOrganization@email.com",
  *                "ownerId":"id@clients"
  *         }
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"Token verification failed"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/getUserOrganizationsMembership"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   }
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{
  *                   "apiKeys":[],
  *                   "id":"ORG-ID",
  *                   "name":"specifiedOrganizationName",
  *                   "email":"specifiedOrganization@email.com",
  *                   "ownerId":"id@clients"
  *         },
  *         "metadata":{
  *           "q": "/organizations/getUserOrganizationsMembership"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"Token verification failed"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/getUserOrganizationsMembership (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "apiKeys":[],
  *         "id":"ORG-ID",
  *         "name":"specifiedOrganizationName",
  *         "email":"specifiedOrganization@email.com",
  *         "ownerId":"id@clients"
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"Token verification failed"
  *     }
  *//**
  * @api {ServiceMethod: kickoutMember} /organizations/kickoutMember kickoutMember
  * @apiName KickoutMember
  * @apiGroup Member
  * @apiVersion 2.1.3-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to remove the existent organization member with any accessible role.
  * <br>Nevertheless at least one Owner (origin or granted one) should be persisted in the organization
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  * @apiParam {String} userId Already stored id for the specific organization issued by relevant authority (Auth0)
  *
  * @apiSuccess Acknowledgment Empty object
  *
  * @apiError {String} field Single (last one) organization Owner is requested to be removed from the relevant organization
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/kickoutMember",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID",
  *                "userId": "id@clients"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/kickoutMember",
  *         "sid":1,
  *         "d":{}
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"At least one Owner should be persisted in the organization: 'ORG-ID'"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/kickoutMember"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID",
  *                   "userId": "id@clients"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{},
  *         "metadata":{
  *           "q": "/organizations/kickoutMember"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"At least one Owner should be persisted in the organization: 'ORG-ID'"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/kickoutMember (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID",
  *         "userId": "id@clients"
  *     }
  *
  * Response:
  *     {
  *
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"At least one Owner should be persisted in the organization: 'ORG-ID'"
  *     }
  */
/**
  * @api {ServiceMethod: addOrganizationApiKey} /organizations/addOrganizationApiKey addOrganizationApiKey
  * @apiName AddOrganizationApiKey
  * @apiGroup ApiKey
  * @apiVersion 2.1.3-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to create the API keys (token) for the relevant organization and further
  * to be used (write and read ability) by potential users of the <a href="http://scalecube.io/configuration-service/index.html">Configuration service</a> according to appropriate permission level.
  * Each API key got the unique name which couldn't be duplicated. Thus Owners could issue the API keys with all accessible roles but the Admins are restricted by the "Admin" or "Member" role API keys issuing.
  * >Note: this method returns all organization info thus API keys with:
  *  ><br>-all accessible permission levels ("Owner" | "Admin" | "Member") will be returned only for the related Organization Owner
  *  ><br>-"Admin" | "Member" permission levels will be returned only for the related Organization Admin
  *  ><br>-"Member" permission level will be returned only for the related Organization Member
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored org-id for the specific organization
  * @apiParam {String} apiKeyName Specified name for the relevant API key
  * @apiParam {Map} claims (<String,String>) Describes given identity on some role
  * @apiParam {Object} claims.role Specified role (Owner/Admin/Member - permission level for the relevant API key)
  *
  * @apiSuccess {Object[]} apiKeys List of all API keys (Array of Objects) in the relevant organization
  * @apiSuccess {String} id Stored org-id for the relevant organization
  * @apiSuccess {String} name Organization name
  * @apiSuccess {String} email Organization e-mail
  * @apiSuccess {String} ownerId id for clients already generated by relevant authority (Auth0)
  *
  * @apiError {String} field API key name duplication
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/addOrganizationApiKey",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID",
  *                "apiKeyName": "specifiedApiKeyName",
  *                "claims": {
  *                            "role":"Owner"
  *                }
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/addOrganizationApiKey",
  *         "sid":1,
  *         "d":{
  *                "apiKeys": [
  *                              {
  *                                 "name": "specifiedApiKeyName",
  *                                 "claims": {"role": "Owner"},
  *                                 "key": "API-TOKEN"
  *                              }
  *                ],
  *                "id":"ORG-ID",
  *                "name":"specifiedOrganizationName",
  *                "email":"specifiedOrganization@email.com",
  *                "ownerId":"id@clients"
  *            }
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"apiKey name:'specifiedApiKeyName' already exists"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/addOrganizationApiKey"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID",
  *                   "apiKeyName": "specifiedApiKeyName",
  *                   "claims": {
  *                                "role":"Admin"
  *                }
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{
  *                   "apiKeys": [
  *                                  {
  *                                     "name": "specifiedApiKeyName",
  *                                     "claims": {"role": "Admin"},
  *                                     "key": "API-TOKEN"
  *                                  },
  *                                  {
  *                                     "name": "specifiedApiKeyName",
  *                                     "claims": {"role": "Owner"},
  *                                     "key": "API-TOKEN"
  *                                  }
  *                   ],
  *                   "id":"ORG-ID",
  *                   "name":"specifiedOrganizationName",
  *                   "email":"specifiedOrganization@email.com",
  *                   "ownerId":"id@clients"
  *         },
  *         "metadata":{
  *           "q": "/organizations/addOrganizationApiKey"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"apiKey name:'specifiedApiKeyName' already exists"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/addOrganizationApiKey (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID",
  *         "apiKeyName": "specifiedApiKeyName",
  *         "claims": {
  *                      "role":"Member"
  *     }
  *
  * Response:
  *     {
  *         "apiKeys": [
  *                       {
  *                          "name": "specifiedApiKeyName",
  *                          "claims": {"role": "Member"},
  *                          "key": "API-TOKEN"
  *                       },
  *                       {
  *                          "name": "specifiedApiKeyName",
  *                          "claims": {"role": "Admin"},
  *                          "key": "API-TOKEN"
  *                       },
  *                       {
  *                          "name": "specifiedApiKeyName",
  *                          "claims": {"role": "Owner"},
  *                          "key": "API-TOKEN"
  *                       }
  *         ],
  *         "id":"ORG-ID",
  *         "name":"specifiedOrganizationName",
  *         "email":"specifiedOrganization@email.com",
  *         "ownerId":"id@clients"
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"apiKey name:'specifiedApiKeyName' already exists"
  *     }
  *//**
  * @api {ServiceMethod: delete} /organizations/delete delete
  * @apiName DeleteOrganization
  * @apiGroup Organization
  * @apiVersion 2.1.3-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables only <b>Owners</b> to delete relevant organization.
  * <br>All relevant API keys issued for organization also deleted thus become invalid after specific period of time is left upon this operation was done.
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  *
  * @apiSuccess {Boolean} deleted The "true" statement
  * @apiSuccess {String} organizationId Already Stored id for the specific organization
  *
  * @apiError {String} field Invalid or non-existent organization id
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/delete",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/delete",
  *         "sid":1,
  *         "d":{
  *                "deleted": true,
  *                "organizationId": "ORG-ID"
  *         }
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"ORG-ID"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/delete"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{
  *                   "deleted": true,
  *                   "organizationId": "ORG-ID"
  *         },
  *         "metadata":{
  *           "q": "/organizations/delete"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"ORG-ID"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/delete (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID"
  *     }
  *
  * Response:
  *     {
  *         "deleted": true,
  *         "organizationId": "ORG-ID"
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"ORG-ID"
  *     }
  *//**
 * @api {ServiceMethod: deleteOrganizationApiKey} /organizations/deleteOrganizationApiKey deleteOrganizationApiKey
 * @apiName DeleteOrganizationApiKey
 * @apiGroup ApiKey
 * @apiVersion 2.1.3-SNAPSHOT
 * @apiPermission Request / Response / Error-response
 *
 * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to delete the API keys (token) from the relevant organization.
 *
 * >Note: this method returns all organization info thus API keys with:
 *  ><br>-all accessible permission levels ("Owner" | "Admin" | "Member") will be returned only for the related Organization Owner
 *  ><br>-"Admin" | "Member" permission levels will be returned only for the related Organization Admin
 *  ><br>-"Member" permission level will be returned only for the related Organization Member
 *
 * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
 * @apiParam {String} organizationId Already stored id for the specific organization
 * @apiParam {String} apiKeyName Specified name for the relevant API key
 *
 * @apiSuccess {Object[]} apiKeys List of all API keys (Array of Objects) in the relevant organization
 * @apiSuccess {String} id Stored org-id for the relevant organization
 * @apiSuccess {String} name Organization name
 * @apiSuccess {String} email Organization e-mail
 * @apiSuccess {String} ownerId id for clients already generated by relevant authority (Auth0)
 *
 * @apiError {String} field Permission denied for specified organization member either organization outsider
 *
 * @apiErrorExample {json} WebSocket
 * Request:
 *     {
 *         "q":"/organizations/deleteOrganizationApiKey",
 *         "sid": 1,
 *         "d":{
 *               "token": {
 *                           "token":"Auth0-TOKEN"
 *               },
 *         "organizationId":"ORG-ID",
 *         "apiKeyName": "specifiedApiKeyName",
 *         }
 *     }
 *
 * Response:
 *     {
 *         "q":"/organizations/deleteOrganizationApiKey",
 *         "sid":1,
 *         "d":{
 *                "apiKeys":[],
 *                "id":"ORG-ID",
 *                "name":"specifiedOrganizationName",
 *                "email":"specifiedOrganization@email.com",
 *                "ownerId":"id@clients"
 *         }
 *
 *     }
 *
 *     {
 *         "sig":1,
 *         "sid":1
 *     }
 *
 * Error Response:
 *     {
 *         "sig":2,
 *         "q":"/io.scalecube.services.error/500",
 *         "sid":1,
 *         "d":{
 *                "errorCode":500,
 *                "errorMessage":"user: 'id@clients', name: 'null', not in role Owner or Admin of organization: 'specifiedOrganizationName'"
 *         }
 *     }
 *
 * @apiErrorExample {json} RSocket
 * Request:
 *     {
 *         "metadata":{
 *                      "q": "/organizations/deleteOrganizationApiKey"
 *         },
 *         "data":{
 *                   "token": {
 *                               "token":"Auth0-TOKEN"
 *                   },
 *         "organizationId":"ORG-ID",
 *         "apiKeyName": "specifiedApiKeyName",
 *         }
 *     }
 *
 * Response:
 *     {
 *         "data":{
 *                   "apiKeys":[],
 *                   "id":"ORG-ID",
 *                   "name":"specifiedOrganizationName",
 *                   "email":"specifiedOrganization@email.com",
 *                   "ownerId":"id@clients"
 *         },
 *         "metadata":{
 *           "q": "/organizations/deleteOrganizationApiKey"
 *         }
 *     }
 *
 * Error Response:
 *     {
 *         "data":{
 *                   "errorCode":500,
 *                   "errorMessage":"user: 'id@clients', name: 'null', not in role Owner or Admin of organization: 'specifiedOrganizationName'"
 *         },
 *         "metadata":{
 *                      "q":"/io.scalecube.services.error/500"
 *         }
 *     }
 *
 * @apiErrorExample{json} HTTP
 * Request:
 * https://localhost:port/organizations/createRepository (endpoint url)
 *
 * Body:
 *     {
 *        "token": {
 *                     "token":"Auth0-TOKEN"
 *         },
 *         "organizationId":"ORG-ID",
 *         "apiKeyName": "specifiedApiKeyName",
 *     }
 *
 * Response:
 *     {
 *         "apiKeys":[],
 *         "id":"ORG-ID",
 *         "name":"specifiedOrganizationName",
 *         "email":"specifiedOrganization@email.com",
 *         "ownerId":"id@clients"
 *     }
 *
 * Error Response:
 *     {
 *         "errorCode":500,
 *         "errorMessage":"user: 'id@clients', name: 'null', not in role Owner or Admin of organization: 'specifiedOrganizationName'"
 *     }
 *//**
  * @api {ServiceMethod: getOrganization} /organizations/getOrganization getOrganization
  * @apiName GetOrganization
  * @apiGroup Organization
  * @apiVersion 2.1.3-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables <b>all members</b> of the relevant organization to get the full organization information.
  * >Note: this method returns all organization info thus API keys with:
  *  ><br>-all accessible permission levels ("Owner" | "Admin" | "Member") will be returned only for the related Organization Owner
  *  ><br>-"Admin" | "Member" permission levels will be returned only for the related Organization Admin
  *  ><br>-"Member" permission level will be returned only for the related Organization Member
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  *
  * @apiSuccess {Object[]} apiKeys List of all API keys (Array of objects) for the relevant organization
  * @apiSuccess {String} id Already generated id for the created organization
  * @apiSuccess {String} name Organization name
  * @apiSuccess {String} email Organization e-mail
  * @apiSuccess {String} ownerId id for clients already generated by relevant authority (Auth0)
  *
  * @apiError {String} field user isn't the member (outsider) of the specified organization
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/getOrganization",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/getOrganization",
  *         "sid":1,
  *         "d":{
  *                "apiKeys":[],
  *                "id":"ORG-ID",
  *                "name":"specifiedOrganizationName",
  *                "email":"specifiedOrganization@email.com",
  *                "ownerId":"id@clients"
  *         }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                errorCode":500,
  *                "errorMessage":"user: 'null', name: 'id@clients', is not a member of organization: 'ORG-ID'"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/getOrganization"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "name":"specifiedOrganizationName",
  *                   "email":"specifiedOrganization@email.com"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{
  *                   "apiKeys":[],
  *                   "id":"ORG-ID",
  *                   "name":"specifiedOrganizationName",
  *                   "email":"specifiedOrganization@email.com",
  *                   "ownerId":"id@clients"
  *         },
  *         "metadata":{
  *           "q": "/organizations/getOrganization"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"user: 'null', name: 'id@clients', is not a member of organization: 'ORG-ID'"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/getOrganization (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID"
  *     }
  *
  * Response:
  *     {
  *         "apiKeys":[],
  *         "id":"ORG-ID",
  *         "name":"specifiedOrganizationName",
  *         "email":"specifiedOrganization@email.com",
  *         "ownerId":"id@clients"
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"user: 'null', name: 'id@clients', is not a member of organization: 'ORG-ID'"
  *     }
  *//**
  * @api {ServiceMethod: leaveOrganization} /organizations/leaveOrganization leaveOrganization
  * @apiName LeaveOrganization
  * @apiGroup Organization
  * @apiVersion 2.1.3-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables each organization <b>member</b> to step-out (leave) from the relevant organization.
  * <br>Nevertheless at least one Owner (origin or granted one) should be persisted in the organization.
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  *
  * @apiSuccess Acknowledgment Empty object
  *
  * @apiError {String} field Single (last one) organization Owner requested to leave the relevant organization
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/leaveOrganization",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/leaveOrganization",
  *         "sid":1,
  *         "d":{}
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"At least one Owner should be persisted in the organization: 'ORG-ID'"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/leaveOrganization"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{},
  *         "metadata":{
  *           "q": "/organizations/leaveOrganization"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"At least one Owner should be persisted in the organization: 'ORG-ID'"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/leaveOrganization (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID"
  *     }
  *
  * Response:
  *     {
  *
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"At least one Owner should be persisted in the organization: 'ORG-ID'"
  *     }
  *//**
 * @apiDefine BadRequestError
 * @apiVersion 2.1.3-SNAPSHOT
 * @apiError BadRequestError The request didn't pass validation
 *
 * @apiErrorExample Error-Response:
 * {
 *   "errorCode": "400"
 *   "errorMessage": "Bad request."
 * }
 */

/**
 * @apiDefine InternalServerError
 *
 * @apiError (Error 500) InternalServerError Error happened during request processing
 *
 * @apiErrorExample Error-Response:
 * {
 *   "errorCode": "500"
 *   "errorMessage": "Error message"
 * }
 */

/**
 * @apiDefine ServiceUnavailableError
 *
 * @apiError (Error 503) ServiceUnavailableError Service in not available to accept requests
 *
 * @apiErrorExample Error-Response:
 * {
 *   "errorCode": "503"
 *   "errorMessage": "No reachable member with such service: %s"
 * }
 */
/**
  * @api {ServiceMethod: updateOrganization} /organizations/updateOrganization updateOrganization
  * @apiName UpdateOrganization
  * @apiGroup Organization
  * @apiVersion 2.1.3-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to update (edit)
  * the specific organization information (name or email) optionally.
  * >Note: this method returns all organization info thus API keys with:
  *  ><br>-all accessible permission levels ("Owner" | "Admin" | "Member") will be returned only for the related Organization Owner
  *  ><br>-"Admin" | "Member" permission levels will be returned only for the related Organization Admin
  *  ><br>-"Member" permission level will be returned only for the related Organization Member
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  * @apiParam {String} name New specified organization name
  * @apiParam {String} email New specified organization e-mail
  *
  * @apiSuccess {Object[]} apiKeys List of all API keys (Array of objects) for the relevant organization
  * @apiSuccess {String} id Already generated id for the created organization
  * @apiSuccess {String} name New specified organization name
  * @apiSuccess {String} email New specified organization e-mail
  * @apiSuccess {String} ownerId id for clients already generated by relevant authority (Auth0)
  *
  * @apiError {String} field Organization e-mail wasn't specified
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/updateOrganization",
  *         "sid": 1,
  *         "d":{
  *               "token": {
  *                           "token":"Auth0-TOKEN"
  *               },
  *         "organizationId":"ORG-ID",
  *         "name":"newSpecifiedOrganizationName",
  *         "email":"newSpecifiedOrganization@email.com"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/updateOrganization",
  *         "sid":1,
  *         "d":{
  *                "apiKeys":[],
  *                "id":"ORG-ID",
  *                "name":"newSpecifiedOrganizationName",
  *                "email":"newSpecifiedOrganization@email.com",
  *                "ownerId":"id@clients"
  *         }
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"Organization email cannot be empty"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/updateOrganization"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID",
  *                   "name":"newSpecifiedOrganizationName",
  *                   "email":"newSpecifiedOrganization@email.com"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{
  *                   "apiKeys":[],
  *                   "id":"ORG-ID",
  *                   "name":"newSpecifiedOrganizationName",
  *                   "email":"newSpecifiedOrganization@email.com",
  *                   "ownerId":"id@clients"
  *         },
  *         "metadata":{
  *           "q": "/organizations/updateOrganization"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"Organization email cannot be empty"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/updateOrganization (endpoint url)
  *
  * Body:
  *     {
  *        "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID",
  *         "name":"newSpecifiedOrganizationName",
  *         "email":"newSpecifiedOrganization@email.com"
  *     }
  *
  * Response:
  *     {
  *         "apiKeys":[],
  *         "id":"ORG-ID",
  *         "name":"newSpecifiedOrganizationName",
  *         "email":"newSpecifiedOrganization@email.com",
  *         "ownerId":"id@clients"
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"Organization email cannot be empty"
  *     }
  *//**
  * @api {ServiceMethod: inviteMember} /organizations/inviteMember inviteMember
  * @apiName InviteMember
  * @apiGroup Member
  * @apiVersion 2.1.3-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to invite a valid user
  * (which client id issued by relevant authority - <a href="https://manage.auth0.com/">Auth0</a>) to step into relevant organization with relevant member's role (permission level).
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  * @apiParam {String} userId Already stored id for the specific organization issued by relevant authority (Auth0)
  * @apiParam {String} role Specified permission level (roles: Owner/Admin/Member) granted for the organization members
  *
  * @apiSuccess Acknowledgment Empty object
  *
  * @apiError {String} field Invalid role for specified organization member is applied
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/inviteMember",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID",
  *                "userId": "id@clients",
  *                "role": "Owner"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/inviteMember",
  *         "sid":1,
  *         "d":{}
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"Unknown role: Boss"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/inviteMember"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID",
  *                   "userId": "id@clients",
  *                   "role": "Admin"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{},
  *         "metadata":{
  *           "q": "/organizations/inviteMember"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"Unknown role: Boss"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/inviteMember (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID",
  *         "userId": "id@clients",
  *         "role": "Member"
  *     }
  *
  * Response:
  *     {
  *
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"Unknown role: Boss"
  *     }
  *//**
  * @api {ServiceMethod: updateOrganizationMemberRole} /organizations/updateOrganizationMemberRole updateOrganizationMemberRole
  * @apiName UpdateOrganizationMemberRole
  * @apiGroup Member
  * @apiVersion 2.1.3-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to upgrade/downgrade relevant organization members' roles.
  * <br>Any of the members who posses Admin role couldn't upgrade themselves whereby only the members with higher - Owner roles are able to do that.
  * Nevertheless any member with Admin or Owner role could downgrade themselves as do the members with Owner role could downgrade the members with Admin role.
  * Furthermore at least one Owner (origin or granted one) should be persisted in the organization.
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  * @apiParam {String} userId Already stored id for the specific organization issued by relevant authority (Auth0)
  * @apiParam {String} role any of accessible member's role (Owner/Admin/Member)
  *
  * @apiSuccess Acknowledgment Empty object
  *
  * @apiError {String} field Invalid role for specified organization member is applied
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/updateOrganizationMemberRole",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID",
  *                "userId": "id@clients",
  *                "role": "Owner"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/updateOrganizationMemberRole",
  *         "sid":1,
  *         "d":{}
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"Unknown role: Boss"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/updateOrganizationMemberRole"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID",
  *                   "userId": "id@clients",
  *                   "role": "Admin"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{},
  *         "metadata":{
  *           "q": "/organizations/updateOrganizationMemberRole"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"Unknown role: Boss"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/updateOrganizationMemberRole (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID",
  *         "userId": "id@clients",
  *         "role": "Member"
  *     }
  *
  * Response:
  *     {
  *
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"Unknown role: Boss"
  *     }
  *//**
  * @api . Getting Started
  * @apiName GettingStarted
  * @apiGroup Overview
  * @apiVersion 2.1.3-SNAPSHOT
  * @apiDescription Organization service enable you to integrate the API in order to create and manage the organizations.
  * Besides the origin owner unique ability to create the organization there is a necessity for each organization member to achieve appropriate
  * managers' permission level (roles: Owner | Admin) granted by other managers of the relevant organization for management ability.
  * Thus each organization could be deleted or relevant credentials updated, authorized users could be invited to and removed from the relevant organization,
  * each member could get the info about the relevant organization and also to know the own membership in the all related organizations.
  * Organization managers could provide and delete the relevant API keys (permission level with appropriate assigned role: Owner | Admin | Member) which are
  * vital leverage (write or read permission provision) for the <a href="http://scalecube.io/configuration-service/index.html">Configuration service</a> management and security purpose.
  *
  * >Note: API keys assigned with some of the relevant roles (Owner | Admin | Member) are visible to organization members' similar roles only via
  *  permission level (role) in the specific Organization:
  *  ><br>-Owner could observe all accessible API keys
  *  ><br>-Admin could observe only the "Admin" and "Member" API keys
  *  ><br>-Member could observe only the "Member" API keys
  *
  * <b>Getting Started</b>
  *
  *
  * All API endpoints documented below are the integral part of <a href="http://scalecube.io/configuration-service/index.html">Configuration service</a> <a href="https://github.com/jivygroup/exchange/wiki/Configuration-&-Organization-services-host-addresses"><b>host address</b></a>.
  * <br> You can try out any query in realtime using our interactive API.
  * Actually service requires authentication, so there is a necessity to get the token issued via secured authority.
  * Thus, firstly we recommend to create an account in <a href="https://manage.auth0.com/">Auth0</a> and issue the token whereby to perform the valid requests across all service endpoints.
  *
  * <b>Validation</b> for the object entities is handled by <b>Scalecube</b> services and do the next upon the request object:
  * >~ ignores any excessive keys and values added besides the required parameters
  * ><br>~ doesn't ignore the keys duplicates and takes the last values which applied for each of the relevant key duplicate
  *
  * >Contracts validation is implemented for specific parameters which value type is string and can only contain characters
  * in range A-Z, a-z, 0-9 as well as underscore, period, dash & percent. Appropriate validation will be added soon.
  */

  /**
  * @api . Transport protocols API
  * @apiName TransportProtocols
  * @apiGroup Overview
  * @apiVersion 2.1.3-SNAPSHOT
  * @apiPermission Successful requests and responses
  * @apiDescription You are able to manage the service API through the three types of transport protocols which are supported.
  * <br>Upon relevant <a href="https://github.com/jivygroup/exchange/wiki/Configuration-&-Organization-services-host-addresses"><b>Host address</b></a> was set the <b>request</b> should contain the following structure according to transport protocol usage:
                      <ul>
  						  <b>Websocket (WS)</b>
                             <li> "q": The query of the relevant service name and method used </li>
                             <li> "sid": The stream identifier (couldn't be reused upon current stream connection is opened)</li>
                             <li> "d": The request data object (parameters and values) </li>
  						  <br><b>RSocket (RS)</b>
  						   <li> "metadata": object which contains "q": The query of the relevant service name and method used </li>
                             <li> "d": object: The request data (parameters and values) </li>
  						  <br><b>HTTP</b>
                             <li> "endpoint url": host address/serviceName/method </li>
                             <li> "method" request: POST </li>
                             <li> "headers": Content-Type application/json </li>
                             <li> "body" json: The request data object (parameters and values) </li>
                      </ul>

  * @apiParamExample {json} WebSocket:
                      Request:
                      {
                          "q": "/serviceName/method_name",
                          "sid":int,
                          "d": {
                                  "relevant request parameters and values"
                               }
                      }

                      Response:
                      {
                          "q":"/serviceName/method_name",
                          "sid":int,
                          "d":{
                                 "relevant response parameters and values"
                              }
                      }
                      {
                          "sig":1,
                          "sid":int
                      }

  * @apiParamExample {json} RSocket:
                      Request:
                      {
                         "metadata": {
                             "q": "/serviceName/method_name"
                                     },
                             "data": {
                                        "relevant request parameters and values"
                                     }
                      }

                      Response:
                      {
                          "data":{
                                    "relevant response parameters and values"
                          },
                          "metadata":{
                            "q": "/serviceName/method_name"
                          }
                      }
  * @apiParamExample {json} HTTP:
                      Request:
                      https://localhost:port/serviceName/method_name (endpoint url)

                      Body:
                      {
                         "relevant request parameters and values"
                      }

                      Response:
                      {
                         "relevant response parameters and values"
                      }
  */

 /**
   * @api  . Interactive API Explorer
   * @apiName InteractiveAPIExplorer
   * @apiGroup Overview
   * @apiVersion 2.1.3-SNAPSHOT
   * @apiDescription <b>WebSocket and RSocket</b> transports are accessible to apply via in-house developed API Explorer called <b>Sandbox</b> thus to connect and run follow up the next steps:
   <ul>
                  <li> Navigate to the sandbox: <a href="http://scalecube.io/api-sandbox/app/index.html">Scalecube sandbox</a> </li>
                  <li> Click on the <b>Settings</b> button then set the relevant <a href="https://github.com/jivygroup/exchange/wiki/Configuration-&-Organization-services-host-addresses"><b>Host address</b></a> for the chosen <b>transport</b> </li>
                  <li> Click on <b>Import icon</b> and copy-paste the template.json file path for <a href="https://raw.githubusercontent.com/scalecube/scalecube-organization-service/master/API-Calls-examples.json">Organization service endpoints.json</a></li>
                  <li> Click on the <b>Connect</b> button (now you are connected to the environment) and push <b>Send</b> button to make your request</li>
   </ul>
 *//**
 * @api {ServiceMethod: getOrganizationMembers} /organizations/getOrganizationMembers getOrganizationMembers
 * @apiName GetOrganizationMembers
 * @apiGroup Member
 * @apiVersion 2.1.3-SNAPSHOT
 * @apiPermission Request / Response / Error-response
 *
 * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to fetch all the members from the relevant organization.
 *
 * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
 * @apiParam {String} organizationId Already stored id for the specific organization
 *
 * @apiSuccess {Object[]} members List of all the members (Array of Objects) in the specified organization
 *
 * @apiError {String} field user isn't the manager either outsider of the specified organization
 *
 * @apiErrorExample {json} WebSocket
 * Request:
 *     {
 *         "q":"/organizations/getOrganizationMembers",
 *         "sid": 1,
 *         "d":{
 *                "token": {
 *                            "token":"Auth0-TOKEN"
 *                },
 *                "organizationId":"ORG-ID"
 *         }
 *     }
 *
 * Response:
 *     {
 *         "q":"/organizations/getOrganizationMembers",
 *         "sid":1,
 *         "d":{
 *                "members":[
 *                             {"id":"id@clients","role":"Owner"},
 *                             {"id":"id@clients","role":"Admin"},
 *                             {"id":"id@clients","role":"Member"}
 *                ]
 *         }
 *
 *     }
 *
 *     {
 *         "sig":1,
 *         "sid":1
 *     }
 *
 * Error Response:
 *     {
 *         "sig":2,
 *         "q":"/io.scalecube.services.error/500",
 *         "sid":1,
 *         "d":{
 *                "errorCode":500,
 *                "errorMessage":"user: 'id@clients', name: 'null', not in role Owner or Admin of organization: 'specifiedOrganizationName'"
 *         }
 *     }
 *
 * @apiErrorExample {json} RSocket
 * Request:
 *     {
 *         "metadata":{
 *                      "q": "/organizations/getOrganizationMembers"
 *         },
 *         "data":{
 *                   "token": {
 *                               "token":"Auth0-TOKEN"
 *                   },
 *                   "organizationId":"ORG-ID"
 *         }
 *     }
 *
 * Response:
 *     {
 *         "data":{
 *                   "members":[
 *                                {"id":"id@clients","role":"Owner"},
 *                                {"id":"id@clients","role":"Admin"},
 *                                {"id":"id@clients","role":"Member"}
 *                   ]
 *         },
 *         "metadata":{
 *           "q": "/organizations/getOrganizationMembers"
 *         }
 *     }
 *
 * Error Response:
 *     {
 *         "data":{
 *                   "errorCode":500,
 *                   "errorMessage":"user: 'id@clients', name: 'null', not in role Owner or Admin of organization: 'specifiedOrganizationName'"
 *         },
 *         "metadata":{
 *                      "q":"/io.scalecube.services.error/500"
 *         }
 *     }
 *
 * @apiErrorExample{json} HTTP
 * Request:
 * https://localhost:port/organizations/getOrganizationMembers (endpoint url)
 *
 * Body:
 *     {
 *         "token": {
 *                     "token":"Auth0-TOKEN"
 *         },
 *         "organizationId":"ORG-ID"
 *     }
 *
 * Response:
 *     {
 *                "members":[
 *                             {"id":"id@clients","role":"Owner"},
 *                             {"id":"id@clients","role":"Admin"},
 *                             {"id":"id@clients","role":"Member"}
 *                ]
 *     }
 *
 * Error Response:
 *     {
 *         "errorCode":500,
 *         "errorMessage":"user: 'id@clients', name: 'null', not in role Owner or Admin of organization: 'specifiedOrganizationName'"
 *     }
 *//**
 * @api {ServiceMethod: create} /organizations/create create
 * @apiName CreateOrganization
 * @apiGroup Organization
 * @apiVersion 2.1.4-SNAPSHOT
 * @apiPermission Request / Response / Error-response
 *
 * @apiDescription This operation enables any user with valid <a href="https://manage.auth0.com/">Token</a> to create the specific organization and store its information (metadata).
 *
 * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
 * @apiParam {String} name Specified organization name
 * @apiParam {String} email Specified organization e-mail
 *
 * @apiSuccess {Object[]} apiKeys List of all API keys (Array of objects) for the relevant organization
 * @apiSuccess {String} id Generated id for the created organization
 * @apiSuccess {String} name Specified organization name
 * @apiSuccess {String} email Specified organization e-mail
 * @apiSuccess {String} ownerId id for clients already generated by relevant authority (Auth0)
 *
 * @apiError {String} field Duplication of the Organization name
 *
 * @apiErrorExample {json} WebSocket
 * Request:
 *     {
 *         "q":"/organizations/create",
 *         "sid": 1,
 *         "d":{
 *               "token": {
 *                           "token":"Auth0-TOKEN"
 *               },
 *               "name":"specifiedOrganizationName",
 *               "email":"specifiedOrganization@email.com"
 *         }
 *     }
 *
 * Response:
 *     {
 *         "q":"/organizations/create",
 *         "sid":1,
 *         "d":{
 *                "apiKeys":[],
 *                "id":"ORG-ID",
 *                "name":"specifiedOrganizationName",
 *                "email":"specifiedOrganization@email.com",
 *                "ownerId":"id@clients"
 *         }
 *
 *     }
 *
 *     {
 *         "sig":1,
 *         "sid":1
 *     }
 *
 * Error Response:
 *     {
 *         "sig":2,
 *         "q":"/io.scalecube.services.error/500",
 *         "sid":1,
 *         "d":{
 *                "errorCode":500,
 *                "errorMessage":"Organization name: 'org name' already in use"
 *         }
 *     }
 *
 * @apiErrorExample {json} RSocket
 * Request:
 *     {
 *         "metadata":{
 *                      "q": "/organizations/create"
 *         },
 *         "data":{
 *                   "token": {
 *                               "token":"Auth0-TOKEN"
 *                   },
 *                   "name":"specifiedOrganizationName",
 *                   "email":"specifiedOrganization@email.com"
 *         }
 *     }
 *
 * Response:
 *     {
 *         "data":{
 *                   "apiKeys":[],
 *                   "id":"ORG-ID",
 *                   "name":"specifiedOrganizationName",
 *                   "email":"specifiedOrganization@email.com",
 *                   "ownerId":"id@clients"
 *         },
 *         "metadata":{
 *           "q": "/organizations/create"
 *         }
 *     }
 *
 * Error Response:
 *     {
 *         "data":{
 *                   "errorCode":500,
 *                   "errorMessage":"Organization name: 'org name' already in use"
 *         },
 *         "metadata":{
 *                      "q":"/io.scalecube.services.error/500"
 *         }
 *     }
 *
 * @apiErrorExample{json} HTTP
 * Request:
 * https://localhost:port/organizations/create (endpoint url)
 *
 * Body:
 *     {
 *        "token": {
 *                     "token":"Auth0-TOKEN"
 *         },
 *         "name":"specifiedOrganizationName",
 *         "email":"specifiedOrganization@email.com"
 *     }
 *
 * Response:
 *     {
 *         "apiKeys":[],
 *         "id":"ORG-ID",
 *         "name":"specifiedOrganizationName",
 *         "email":"specifiedOrganization@email.com",
 *         "ownerId":"id@clients"
 *     }
 *
 * Error Response:
 *     {
 *         "errorCode":500,
 *         "errorMessage":"Organization name: 'org name' already in use"
 *     }
 */{
  "name": "Organization service",
  "version": "2.1.4-SNAPSHOT",
  "description": "Organization service API",
  "title": "API documentation for the Organization Service",
  "template": {
    "forceLanguage" : "en"
  },
  "order": [
    "Overview",
    "GettingStarted",
    "TransportProtocols",
    "InteractiveAPIExplorer",
    "CreateOrganization",
    "GetOrganization",
    "UpdateOrganization",
    "DeleteOrganization",
    "LeaveOrganization",
    "GetUserOrganizationsMembership",
    "InviteMember",
    "GetOrganizationMembers",
    "UpdateOrganizationMemberRole",
    "KickoutMember",
    "AddOrganizationApiKey",
    "DeleteOrganizationApiKey"
  ]
}
/**
  * @api {ServiceMethod: getUserOrganizationsMembership} /organizations/getUserOrganizationsMembership getUserOrganizationsMembership
  * @apiName GetUserOrganizationsMembership
  * @apiGroup Member
  * @apiVersion 2.1.4-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables each organization <b>member</b> to get the list of all relevant organizations (full info) which the member was invited.
  * >Note: this method returns all organization info thus API keys with:
  *  ><br>-all accessible permission levels ("Owner" | "Admin" | "Member") will be returned only for the related Organization Owner
  *  ><br>-"Admin" | "Member" permission levels will be returned only for the related Organization Admin
  *  ><br>-"Member" permission level will be returned only for the related Organization Member
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  *
  * @apiSuccess {Object[]} organizations List of all Organizations (Array of objects) which the member was invited
  * @apiSuccess {Object[]} organizations.apiKeys List of all API keys (Array of objects) for the relevant organization
  * @apiSuccess {String} organizations.id Already generated id for the created organization
  * @apiSuccess {String} organizations.name Organization name
  * @apiSuccess {String} organizations.email Organization e-mail
  * @apiSuccess {String} organizations.ownerId id for clients already generated by relevant authority (Auth0)
  *
  * @apiError {String} field Invalid or expired token
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/getUserOrganizationsMembership",
  *         "sid": 1,
  *         "d":{
  *               "token": {
  *                           "token":"Auth0-TOKEN"
  *               }
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/getUserOrganizationsMembership",
  *         "sid":1,
  *         "d":{
  *                "apiKeys":[],
  *                "id":"ORG-ID",
  *                "name":"specifiedOrganizationName",
  *                "email":"specifiedOrganization@email.com",
  *                "ownerId":"id@clients"
  *         }
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"Token verification failed"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/getUserOrganizationsMembership"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   }
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{
  *                   "apiKeys":[],
  *                   "id":"ORG-ID",
  *                   "name":"specifiedOrganizationName",
  *                   "email":"specifiedOrganization@email.com",
  *                   "ownerId":"id@clients"
  *         },
  *         "metadata":{
  *           "q": "/organizations/getUserOrganizationsMembership"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"Token verification failed"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/getUserOrganizationsMembership (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "apiKeys":[],
  *         "id":"ORG-ID",
  *         "name":"specifiedOrganizationName",
  *         "email":"specifiedOrganization@email.com",
  *         "ownerId":"id@clients"
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"Token verification failed"
  *     }
  *//**
  * @api {ServiceMethod: kickoutMember} /organizations/kickoutMember kickoutMember
  * @apiName KickoutMember
  * @apiGroup Member
  * @apiVersion 2.1.4-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to remove the existent organization member with any accessible role.
  * <br>Nevertheless at least one Owner (origin or granted one) should be persisted in the organization
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  * @apiParam {String} userId Already stored id for the specific organization issued by relevant authority (Auth0)
  *
  * @apiSuccess Acknowledgment Empty object
  *
  * @apiError {String} field Single (last one) organization Owner is requested to be removed from the relevant organization
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/kickoutMember",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID",
  *                "userId": "id@clients"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/kickoutMember",
  *         "sid":1,
  *         "d":{}
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"At least one Owner should be persisted in the organization: 'ORG-ID'"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/kickoutMember"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID",
  *                   "userId": "id@clients"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{},
  *         "metadata":{
  *           "q": "/organizations/kickoutMember"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"At least one Owner should be persisted in the organization: 'ORG-ID'"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/kickoutMember (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID",
  *         "userId": "id@clients"
  *     }
  *
  * Response:
  *     {
  *
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"At least one Owner should be persisted in the organization: 'ORG-ID'"
  *     }
  */
/**
  * @api {ServiceMethod: addOrganizationApiKey} /organizations/addOrganizationApiKey addOrganizationApiKey
  * @apiName AddOrganizationApiKey
  * @apiGroup ApiKey
  * @apiVersion 2.1.4-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to create the API keys (token) for the relevant organization and further
  * to be used (write and read ability) by potential users of the <a href="http://scalecube.io/configuration-service/index.html">Configuration service</a> according to appropriate permission level.
  * Each API key got the unique name which couldn't be duplicated. Thus Owners could issue the API keys with all accessible roles but the Admins are restricted by the "Admin" or "Member" role API keys issuing.
  * >Note: this method returns all organization info thus API keys with:
  *  ><br>-all accessible permission levels ("Owner" | "Admin" | "Member") will be returned only for the related Organization Owner
  *  ><br>-"Admin" | "Member" permission levels will be returned only for the related Organization Admin
  *  ><br>-"Member" permission level will be returned only for the related Organization Member
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored org-id for the specific organization
  * @apiParam {String} apiKeyName Specified name for the relevant API key
  * @apiParam {Map} claims (<String,String>) Describes given identity on some role
  * @apiParam {Object} claims.role Specified role (Owner/Admin/Member - permission level for the relevant API key)
  *
  * @apiSuccess {Object[]} apiKeys List of all API keys (Array of Objects) in the relevant organization
  * @apiSuccess {String} id Stored org-id for the relevant organization
  * @apiSuccess {String} name Organization name
  * @apiSuccess {String} email Organization e-mail
  * @apiSuccess {String} ownerId id for clients already generated by relevant authority (Auth0)
  *
  * @apiError {String} field API key name duplication
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/addOrganizationApiKey",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID",
  *                "apiKeyName": "specifiedApiKeyName",
  *                "claims": {
  *                            "role":"Owner"
  *                }
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/addOrganizationApiKey",
  *         "sid":1,
  *         "d":{
  *                "apiKeys": [
  *                              {
  *                                 "name": "specifiedApiKeyName",
  *                                 "claims": {"role": "Owner"},
  *                                 "key": "API-TOKEN"
  *                              }
  *                ],
  *                "id":"ORG-ID",
  *                "name":"specifiedOrganizationName",
  *                "email":"specifiedOrganization@email.com",
  *                "ownerId":"id@clients"
  *            }
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"apiKey name:'specifiedApiKeyName' already exists"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/addOrganizationApiKey"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID",
  *                   "apiKeyName": "specifiedApiKeyName",
  *                   "claims": {
  *                                "role":"Admin"
  *                }
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{
  *                   "apiKeys": [
  *                                  {
  *                                     "name": "specifiedApiKeyName",
  *                                     "claims": {"role": "Admin"},
  *                                     "key": "API-TOKEN"
  *                                  },
  *                                  {
  *                                     "name": "specifiedApiKeyName",
  *                                     "claims": {"role": "Owner"},
  *                                     "key": "API-TOKEN"
  *                                  }
  *                   ],
  *                   "id":"ORG-ID",
  *                   "name":"specifiedOrganizationName",
  *                   "email":"specifiedOrganization@email.com",
  *                   "ownerId":"id@clients"
  *         },
  *         "metadata":{
  *           "q": "/organizations/addOrganizationApiKey"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"apiKey name:'specifiedApiKeyName' already exists"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/addOrganizationApiKey (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID",
  *         "apiKeyName": "specifiedApiKeyName",
  *         "claims": {
  *                      "role":"Member"
  *     }
  *
  * Response:
  *     {
  *         "apiKeys": [
  *                       {
  *                          "name": "specifiedApiKeyName",
  *                          "claims": {"role": "Member"},
  *                          "key": "API-TOKEN"
  *                       },
  *                       {
  *                          "name": "specifiedApiKeyName",
  *                          "claims": {"role": "Admin"},
  *                          "key": "API-TOKEN"
  *                       },
  *                       {
  *                          "name": "specifiedApiKeyName",
  *                          "claims": {"role": "Owner"},
  *                          "key": "API-TOKEN"
  *                       }
  *         ],
  *         "id":"ORG-ID",
  *         "name":"specifiedOrganizationName",
  *         "email":"specifiedOrganization@email.com",
  *         "ownerId":"id@clients"
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"apiKey name:'specifiedApiKeyName' already exists"
  *     }
  *//**
  * @api {ServiceMethod: delete} /organizations/delete delete
  * @apiName DeleteOrganization
  * @apiGroup Organization
  * @apiVersion 2.1.4-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables only <b>Owners</b> to delete relevant organization.
  * <br>All relevant API keys issued for organization also deleted thus become invalid after specific period of time is left upon this operation was done.
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  *
  * @apiSuccess {Boolean} deleted The "true" statement
  * @apiSuccess {String} organizationId Already Stored id for the specific organization
  *
  * @apiError {String} field Invalid or non-existent organization id
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/delete",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/delete",
  *         "sid":1,
  *         "d":{
  *                "deleted": true,
  *                "organizationId": "ORG-ID"
  *         }
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"ORG-ID"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/delete"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{
  *                   "deleted": true,
  *                   "organizationId": "ORG-ID"
  *         },
  *         "metadata":{
  *           "q": "/organizations/delete"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"ORG-ID"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/delete (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID"
  *     }
  *
  * Response:
  *     {
  *         "deleted": true,
  *         "organizationId": "ORG-ID"
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"ORG-ID"
  *     }
  *//**
 * @api {ServiceMethod: deleteOrganizationApiKey} /organizations/deleteOrganizationApiKey deleteOrganizationApiKey
 * @apiName DeleteOrganizationApiKey
 * @apiGroup ApiKey
 * @apiVersion 2.1.4-SNAPSHOT
 * @apiPermission Request / Response / Error-response
 *
 * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to delete the API keys (token) from the relevant organization.
 *
 * >Note: this method returns all organization info thus API keys with:
 *  ><br>-all accessible permission levels ("Owner" | "Admin" | "Member") will be returned only for the related Organization Owner
 *  ><br>-"Admin" | "Member" permission levels will be returned only for the related Organization Admin
 *  ><br>-"Member" permission level will be returned only for the related Organization Member
 *
 * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
 * @apiParam {String} organizationId Already stored id for the specific organization
 * @apiParam {String} apiKeyName Specified name for the relevant API key
 *
 * @apiSuccess {Object[]} apiKeys List of all API keys (Array of Objects) in the relevant organization
 * @apiSuccess {String} id Stored org-id for the relevant organization
 * @apiSuccess {String} name Organization name
 * @apiSuccess {String} email Organization e-mail
 * @apiSuccess {String} ownerId id for clients already generated by relevant authority (Auth0)
 *
 * @apiError {String} field Permission denied for specified organization member either organization outsider
 *
 * @apiErrorExample {json} WebSocket
 * Request:
 *     {
 *         "q":"/organizations/deleteOrganizationApiKey",
 *         "sid": 1,
 *         "d":{
 *               "token": {
 *                           "token":"Auth0-TOKEN"
 *               },
 *         "organizationId":"ORG-ID",
 *         "apiKeyName": "specifiedApiKeyName",
 *         }
 *     }
 *
 * Response:
 *     {
 *         "q":"/organizations/deleteOrganizationApiKey",
 *         "sid":1,
 *         "d":{
 *                "apiKeys":[],
 *                "id":"ORG-ID",
 *                "name":"specifiedOrganizationName",
 *                "email":"specifiedOrganization@email.com",
 *                "ownerId":"id@clients"
 *         }
 *
 *     }
 *
 *     {
 *         "sig":1,
 *         "sid":1
 *     }
 *
 * Error Response:
 *     {
 *         "sig":2,
 *         "q":"/io.scalecube.services.error/500",
 *         "sid":1,
 *         "d":{
 *                "errorCode":500,
 *                "errorMessage":"user: 'id@clients', name: 'null', not in role Owner or Admin of organization: 'specifiedOrganizationName'"
 *         }
 *     }
 *
 * @apiErrorExample {json} RSocket
 * Request:
 *     {
 *         "metadata":{
 *                      "q": "/organizations/deleteOrganizationApiKey"
 *         },
 *         "data":{
 *                   "token": {
 *                               "token":"Auth0-TOKEN"
 *                   },
 *         "organizationId":"ORG-ID",
 *         "apiKeyName": "specifiedApiKeyName",
 *         }
 *     }
 *
 * Response:
 *     {
 *         "data":{
 *                   "apiKeys":[],
 *                   "id":"ORG-ID",
 *                   "name":"specifiedOrganizationName",
 *                   "email":"specifiedOrganization@email.com",
 *                   "ownerId":"id@clients"
 *         },
 *         "metadata":{
 *           "q": "/organizations/deleteOrganizationApiKey"
 *         }
 *     }
 *
 * Error Response:
 *     {
 *         "data":{
 *                   "errorCode":500,
 *                   "errorMessage":"user: 'id@clients', name: 'null', not in role Owner or Admin of organization: 'specifiedOrganizationName'"
 *         },
 *         "metadata":{
 *                      "q":"/io.scalecube.services.error/500"
 *         }
 *     }
 *
 * @apiErrorExample{json} HTTP
 * Request:
 * https://localhost:port/organizations/createRepository (endpoint url)
 *
 * Body:
 *     {
 *        "token": {
 *                     "token":"Auth0-TOKEN"
 *         },
 *         "organizationId":"ORG-ID",
 *         "apiKeyName": "specifiedApiKeyName",
 *     }
 *
 * Response:
 *     {
 *         "apiKeys":[],
 *         "id":"ORG-ID",
 *         "name":"specifiedOrganizationName",
 *         "email":"specifiedOrganization@email.com",
 *         "ownerId":"id@clients"
 *     }
 *
 * Error Response:
 *     {
 *         "errorCode":500,
 *         "errorMessage":"user: 'id@clients', name: 'null', not in role Owner or Admin of organization: 'specifiedOrganizationName'"
 *     }
 *//**
  * @api {ServiceMethod: getOrganization} /organizations/getOrganization getOrganization
  * @apiName GetOrganization
  * @apiGroup Organization
  * @apiVersion 2.1.4-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables <b>all members</b> of the relevant organization to get the full organization information.
  * >Note: this method returns all organization info thus API keys with:
  *  ><br>-all accessible permission levels ("Owner" | "Admin" | "Member") will be returned only for the related Organization Owner
  *  ><br>-"Admin" | "Member" permission levels will be returned only for the related Organization Admin
  *  ><br>-"Member" permission level will be returned only for the related Organization Member
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  *
  * @apiSuccess {Object[]} apiKeys List of all API keys (Array of objects) for the relevant organization
  * @apiSuccess {String} id Already generated id for the created organization
  * @apiSuccess {String} name Organization name
  * @apiSuccess {String} email Organization e-mail
  * @apiSuccess {String} ownerId id for clients already generated by relevant authority (Auth0)
  *
  * @apiError {String} field user isn't the member (outsider) of the specified organization
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/getOrganization",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/getOrganization",
  *         "sid":1,
  *         "d":{
  *                "apiKeys":[],
  *                "id":"ORG-ID",
  *                "name":"specifiedOrganizationName",
  *                "email":"specifiedOrganization@email.com",
  *                "ownerId":"id@clients"
  *         }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                errorCode":500,
  *                "errorMessage":"user: 'null', name: 'id@clients', is not a member of organization: 'ORG-ID'"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/getOrganization"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "name":"specifiedOrganizationName",
  *                   "email":"specifiedOrganization@email.com"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{
  *                   "apiKeys":[],
  *                   "id":"ORG-ID",
  *                   "name":"specifiedOrganizationName",
  *                   "email":"specifiedOrganization@email.com",
  *                   "ownerId":"id@clients"
  *         },
  *         "metadata":{
  *           "q": "/organizations/getOrganization"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"user: 'null', name: 'id@clients', is not a member of organization: 'ORG-ID'"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/getOrganization (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID"
  *     }
  *
  * Response:
  *     {
  *         "apiKeys":[],
  *         "id":"ORG-ID",
  *         "name":"specifiedOrganizationName",
  *         "email":"specifiedOrganization@email.com",
  *         "ownerId":"id@clients"
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"user: 'null', name: 'id@clients', is not a member of organization: 'ORG-ID'"
  *     }
  *//**
  * @api {ServiceMethod: leaveOrganization} /organizations/leaveOrganization leaveOrganization
  * @apiName LeaveOrganization
  * @apiGroup Organization
  * @apiVersion 2.1.4-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables each organization <b>member</b> to step-out (leave) from the relevant organization.
  * <br>Nevertheless at least one Owner (origin or granted one) should be persisted in the organization.
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  *
  * @apiSuccess Acknowledgment Empty object
  *
  * @apiError {String} field Single (last one) organization Owner requested to leave the relevant organization
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/leaveOrganization",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/leaveOrganization",
  *         "sid":1,
  *         "d":{}
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"At least one Owner should be persisted in the organization: 'ORG-ID'"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/leaveOrganization"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{},
  *         "metadata":{
  *           "q": "/organizations/leaveOrganization"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"At least one Owner should be persisted in the organization: 'ORG-ID'"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/leaveOrganization (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID"
  *     }
  *
  * Response:
  *     {
  *
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"At least one Owner should be persisted in the organization: 'ORG-ID'"
  *     }
  *//**
 * @apiDefine BadRequestError
 * @apiVersion 2.1.4-SNAPSHOT
 * @apiError BadRequestError The request didn't pass validation
 *
 * @apiErrorExample Error-Response:
 * {
 *   "errorCode": "400"
 *   "errorMessage": "Bad request."
 * }
 */

/**
 * @apiDefine InternalServerError
 *
 * @apiError (Error 500) InternalServerError Error happened during request processing
 *
 * @apiErrorExample Error-Response:
 * {
 *   "errorCode": "500"
 *   "errorMessage": "Error message"
 * }
 */

/**
 * @apiDefine ServiceUnavailableError
 *
 * @apiError (Error 503) ServiceUnavailableError Service in not available to accept requests
 *
 * @apiErrorExample Error-Response:
 * {
 *   "errorCode": "503"
 *   "errorMessage": "No reachable member with such service: %s"
 * }
 */
/**
  * @api {ServiceMethod: updateOrganization} /organizations/updateOrganization updateOrganization
  * @apiName UpdateOrganization
  * @apiGroup Organization
  * @apiVersion 2.1.4-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to update (edit)
  * the specific organization information (name or email) optionally.
  * >Note: this method returns all organization info thus API keys with:
  *  ><br>-all accessible permission levels ("Owner" | "Admin" | "Member") will be returned only for the related Organization Owner
  *  ><br>-"Admin" | "Member" permission levels will be returned only for the related Organization Admin
  *  ><br>-"Member" permission level will be returned only for the related Organization Member
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  * @apiParam {String} name New specified organization name
  * @apiParam {String} email New specified organization e-mail
  *
  * @apiSuccess {Object[]} apiKeys List of all API keys (Array of objects) for the relevant organization
  * @apiSuccess {String} id Already generated id for the created organization
  * @apiSuccess {String} name New specified organization name
  * @apiSuccess {String} email New specified organization e-mail
  * @apiSuccess {String} ownerId id for clients already generated by relevant authority (Auth0)
  *
  * @apiError {String} field Organization e-mail wasn't specified
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/updateOrganization",
  *         "sid": 1,
  *         "d":{
  *               "token": {
  *                           "token":"Auth0-TOKEN"
  *               },
  *         "organizationId":"ORG-ID",
  *         "name":"newSpecifiedOrganizationName",
  *         "email":"newSpecifiedOrganization@email.com"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/updateOrganization",
  *         "sid":1,
  *         "d":{
  *                "apiKeys":[],
  *                "id":"ORG-ID",
  *                "name":"newSpecifiedOrganizationName",
  *                "email":"newSpecifiedOrganization@email.com",
  *                "ownerId":"id@clients"
  *         }
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"Organization email cannot be empty"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/updateOrganization"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID",
  *                   "name":"newSpecifiedOrganizationName",
  *                   "email":"newSpecifiedOrganization@email.com"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{
  *                   "apiKeys":[],
  *                   "id":"ORG-ID",
  *                   "name":"newSpecifiedOrganizationName",
  *                   "email":"newSpecifiedOrganization@email.com",
  *                   "ownerId":"id@clients"
  *         },
  *         "metadata":{
  *           "q": "/organizations/updateOrganization"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"Organization email cannot be empty"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/updateOrganization (endpoint url)
  *
  * Body:
  *     {
  *        "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID",
  *         "name":"newSpecifiedOrganizationName",
  *         "email":"newSpecifiedOrganization@email.com"
  *     }
  *
  * Response:
  *     {
  *         "apiKeys":[],
  *         "id":"ORG-ID",
  *         "name":"newSpecifiedOrganizationName",
  *         "email":"newSpecifiedOrganization@email.com",
  *         "ownerId":"id@clients"
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"Organization email cannot be empty"
  *     }
  *//**
  * @api {ServiceMethod: inviteMember} /organizations/inviteMember inviteMember
  * @apiName InviteMember
  * @apiGroup Member
  * @apiVersion 2.1.4-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to invite a valid user
  * (which client id issued by relevant authority - <a href="https://manage.auth0.com/">Auth0</a>) to step into relevant organization with relevant member's role (permission level).
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  * @apiParam {String} userId Already stored id for the specific organization issued by relevant authority (Auth0)
  * @apiParam {String} role Specified permission level (roles: Owner/Admin/Member) granted for the organization members
  *
  * @apiSuccess Acknowledgment Empty object
  *
  * @apiError {String} field Invalid role for specified organization member is applied
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/inviteMember",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID",
  *                "userId": "id@clients",
  *                "role": "Owner"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/inviteMember",
  *         "sid":1,
  *         "d":{}
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"Unknown role: Boss"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/inviteMember"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID",
  *                   "userId": "id@clients",
  *                   "role": "Admin"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{},
  *         "metadata":{
  *           "q": "/organizations/inviteMember"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"Unknown role: Boss"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/inviteMember (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID",
  *         "userId": "id@clients",
  *         "role": "Member"
  *     }
  *
  * Response:
  *     {
  *
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"Unknown role: Boss"
  *     }
  *//**
  * @api {ServiceMethod: updateOrganizationMemberRole} /organizations/updateOrganizationMemberRole updateOrganizationMemberRole
  * @apiName UpdateOrganizationMemberRole
  * @apiGroup Member
  * @apiVersion 2.1.4-SNAPSHOT
  * @apiPermission Request / Response / Error-response
  *
  * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to upgrade/downgrade relevant organization members' roles.
  * <br>Any of the members who posses Admin role couldn't upgrade themselves whereby only the members with higher - Owner roles are able to do that.
  * Nevertheless any member with Admin or Owner role could downgrade themselves as do the members with Owner role could downgrade the members with Admin role.
  * Furthermore at least one Owner (origin or granted one) should be persisted in the organization.
  *
  * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
  * @apiParam {String} organizationId Already stored id for the specific organization
  * @apiParam {String} userId Already stored id for the specific organization issued by relevant authority (Auth0)
  * @apiParam {String} role any of accessible member's role (Owner/Admin/Member)
  *
  * @apiSuccess Acknowledgment Empty object
  *
  * @apiError {String} field Invalid role for specified organization member is applied
  *
  * @apiErrorExample {json} WebSocket
  * Request:
  *     {
  *         "q":"/organizations/updateOrganizationMemberRole",
  *         "sid": 1,
  *         "d":{
  *                "token": {
  *                            "token":"Auth0-TOKEN"
  *                },
  *                "organizationId":"ORG-ID",
  *                "userId": "id@clients",
  *                "role": "Owner"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "q":"/organizations/updateOrganizationMemberRole",
  *         "sid":1,
  *         "d":{}
  *
  *     }
  *
  *     {
  *         "sig":1,
  *         "sid":1
  *     }
  *
  * Error Response:
  *     {
  *         "sig":2,
  *         "q":"/io.scalecube.services.error/500",
  *         "sid":1,
  *         "d":{
  *                "errorCode":500,
  *                "errorMessage":"Unknown role: Boss"
  *         }
  *     }
  *
  * @apiErrorExample {json} RSocket
  * Request:
  *     {
  *         "metadata":{
  *                      "q": "/organizations/updateOrganizationMemberRole"
  *         },
  *         "data":{
  *                   "token": {
  *                               "token":"Auth0-TOKEN"
  *                   },
  *                   "organizationId":"ORG-ID",
  *                   "userId": "id@clients",
  *                   "role": "Admin"
  *         }
  *     }
  *
  * Response:
  *     {
  *         "data":{},
  *         "metadata":{
  *           "q": "/organizations/updateOrganizationMemberRole"
  *         }
  *     }
  *
  * Error Response:
  *     {
  *         "data":{
  *                   "errorCode":500,
  *                   "errorMessage":"Unknown role: Boss"
  *         },
  *         "metadata":{
  *                      "q":"/io.scalecube.services.error/500"
  *         }
  *     }
  *
  * @apiErrorExample{json} HTTP
  * Request:
  * https://localhost:port/organizations/updateOrganizationMemberRole (endpoint url)
  *
  * Body:
  *     {
  *         "token": {
  *                     "token":"Auth0-TOKEN"
  *         },
  *         "organizationId":"ORG-ID",
  *         "userId": "id@clients",
  *         "role": "Member"
  *     }
  *
  * Response:
  *     {
  *
  *     }
  *
  * Error Response:
  *     {
  *         "errorCode":500,
  *         "errorMessage":"Unknown role: Boss"
  *     }
  *//**
  * @api . Getting Started
  * @apiName GettingStarted
  * @apiGroup Overview
  * @apiVersion 2.1.4-SNAPSHOT
  * @apiDescription Organization service enable you to integrate the API in order to create and manage the organizations.
  * Besides the origin owner unique ability to create the organization there is a necessity for each organization member to achieve appropriate
  * managers' permission level (roles: Owner | Admin) granted by other managers of the relevant organization for management ability.
  * Thus each organization could be deleted or relevant credentials updated, authorized users could be invited to and removed from the relevant organization,
  * each member could get the info about the relevant organization and also to know the own membership in the all related organizations.
  * Organization managers could provide and delete the relevant API keys (permission level with appropriate assigned role: Owner | Admin | Member) which are
  * vital leverage (write or read permission provision) for the <a href="http://scalecube.io/configuration-service/index.html">Configuration service</a> management and security purpose.
  *
  * >Note: API keys assigned with some of the relevant roles (Owner | Admin | Member) are visible to organization members' similar roles only via
  *  permission level (role) in the specific Organization:
  *  ><br>-Owner could observe all accessible API keys
  *  ><br>-Admin could observe only the "Admin" and "Member" API keys
  *  ><br>-Member could observe only the "Member" API keys
  *
  * <b>Getting Started</b>
  *
  *
  * All API endpoints documented below are the integral part of <a href="http://scalecube.io/configuration-service/index.html">Configuration service</a> <a href="https://github.com/jivygroup/exchange/wiki/Configuration-&-Organization-services-host-addresses"><b>host address</b></a>.
  * <br> You can try out any query in realtime using our interactive API.
  * Actually service requires authentication, so there is a necessity to get the token issued via secured authority.
  * Thus, firstly we recommend to create an account in <a href="https://manage.auth0.com/">Auth0</a> and issue the token whereby to perform the valid requests across all service endpoints.
  *
  * <b>Validation</b> for the object entities is handled by <b>Scalecube</b> services and do the next upon the request object:
  * >~ ignores any excessive keys and values added besides the required parameters
  * ><br>~ doesn't ignore the keys duplicates and takes the last values which applied for each of the relevant key duplicate
  *
  * >Contracts validation is implemented for specific parameters which value type is string and can only contain characters
  * in range A-Z, a-z, 0-9 as well as underscore, period, dash & percent. Appropriate validation will be added soon.
  */

  /**
  * @api . Transport protocols API
  * @apiName TransportProtocols
  * @apiGroup Overview
  * @apiVersion 2.1.4-SNAPSHOT
  * @apiPermission Successful requests and responses
  * @apiDescription You are able to manage the service API through the three types of transport protocols which are supported.
  * <br>Upon relevant <a href="https://github.com/jivygroup/exchange/wiki/Configuration-&-Organization-services-host-addresses"><b>Host address</b></a> was set the <b>request</b> should contain the following structure according to transport protocol usage:
                      <ul>
  						  <b>Websocket (WS)</b>
                             <li> "q": The query of the relevant service name and method used </li>
                             <li> "sid": The stream identifier (couldn't be reused upon current stream connection is opened)</li>
                             <li> "d": The request data object (parameters and values) </li>
  						  <br><b>RSocket (RS)</b>
  						   <li> "metadata": object which contains "q": The query of the relevant service name and method used </li>
                             <li> "d": object: The request data (parameters and values) </li>
  						  <br><b>HTTP</b>
                             <li> "endpoint url": host address/serviceName/method </li>
                             <li> "method" request: POST </li>
                             <li> "headers": Content-Type application/json </li>
                             <li> "body" json: The request data object (parameters and values) </li>
                      </ul>

  * @apiParamExample {json} WebSocket:
                      Request:
                      {
                          "q": "/serviceName/method_name",
                          "sid":int,
                          "d": {
                                  "relevant request parameters and values"
                               }
                      }

                      Response:
                      {
                          "q":"/serviceName/method_name",
                          "sid":int,
                          "d":{
                                 "relevant response parameters and values"
                              }
                      }
                      {
                          "sig":1,
                          "sid":int
                      }

  * @apiParamExample {json} RSocket:
                      Request:
                      {
                         "metadata": {
                             "q": "/serviceName/method_name"
                                     },
                             "data": {
                                        "relevant request parameters and values"
                                     }
                      }

                      Response:
                      {
                          "data":{
                                    "relevant response parameters and values"
                          },
                          "metadata":{
                            "q": "/serviceName/method_name"
                          }
                      }
  * @apiParamExample {json} HTTP:
                      Request:
                      https://localhost:port/serviceName/method_name (endpoint url)

                      Body:
                      {
                         "relevant request parameters and values"
                      }

                      Response:
                      {
                         "relevant response parameters and values"
                      }
  */

 /**
   * @api  . Interactive API Explorer
   * @apiName InteractiveAPIExplorer
   * @apiGroup Overview
   * @apiVersion 2.1.4-SNAPSHOT
   * @apiDescription <b>WebSocket and RSocket</b> transports are accessible to apply via in-house developed API Explorer called <b>Sandbox</b> thus to connect and run follow up the next steps:
   <ul>
                  <li> Navigate to the sandbox: <a href="http://scalecube.io/api-sandbox/app/index.html">Scalecube sandbox</a> </li>
                  <li> Click on the <b>Settings</b> button then set the relevant <a href="https://github.com/jivygroup/exchange/wiki/Configuration-&-Organization-services-host-addresses"><b>Host address</b></a> for the chosen <b>transport</b> </li>
                  <li> Click on <b>Import icon</b> and copy-paste the template.json file path for <a href="https://raw.githubusercontent.com/scalecube/scalecube-organization-service/master/API-Calls-examples.json">Organization service endpoints.json</a></li>
                  <li> Click on the <b>Connect</b> button (now you are connected to the environment) and push <b>Send</b> button to make your request</li>
   </ul>
 *//**
 * @api {ServiceMethod: getOrganizationMembers} /organizations/getOrganizationMembers getOrganizationMembers
 * @apiName GetOrganizationMembers
 * @apiGroup Member
 * @apiVersion 2.1.4-SNAPSHOT
 * @apiPermission Request / Response / Error-response
 *
 * @apiDescription This operation enables only organization managers <b>(Owner | Admin)</b> to fetch all the members from the relevant organization.
 *
 * @apiParam {Object} token The requested token issued by relevant authority (Auth0)
 * @apiParam {String} organizationId Already stored id for the specific organization
 *
 * @apiSuccess {Object[]} members List of all the members (Array of Objects) in the specified organization
 *
 * @apiError {String} field user isn't the manager either outsider of the specified organization
 *
 * @apiErrorExample {json} WebSocket
 * Request:
 *     {
 *         "q":"/organizations/getOrganizationMembers",
 *         "sid": 1,
 *         "d":{
 *                "token": {
 *                            "token":"Auth0-TOKEN"
 *                },
 *                "organizationId":"ORG-ID"
 *         }
 *     }
 *
 * Response:
 *     {
 *         "q":"/organizations/getOrganizationMembers",
 *         "sid":1,
 *         "d":{
 *                "members":[
 *                             {"id":"id@clients","role":"Owner"},
 *                             {"id":"id@clients","role":"Admin"},
 *                             {"id":"id@clients","role":"Member"}
 *                ]
 *         }
 *
 *     }
 *
 *     {
 *         "sig":1,
 *         "sid":1
 *     }
 *
 * Error Response:
 *     {
 *         "sig":2,
 *         "q":"/io.scalecube.services.error/500",
 *         "sid":1,
 *         "d":{
 *                "errorCode":500,
 *                "errorMessage":"user: 'id@clients', name: 'null', not in role Owner or Admin of organization: 'specifiedOrganizationName'"
 *         }
 *     }
 *
 * @apiErrorExample {json} RSocket
 * Request:
 *     {
 *         "metadata":{
 *                      "q": "/organizations/getOrganizationMembers"
 *         },
 *         "data":{
 *                   "token": {
 *                               "token":"Auth0-TOKEN"
 *                   },
 *                   "organizationId":"ORG-ID"
 *         }
 *     }
 *
 * Response:
 *     {
 *         "data":{
 *                   "members":[
 *                                {"id":"id@clients","role":"Owner"},
 *                                {"id":"id@clients","role":"Admin"},
 *                                {"id":"id@clients","role":"Member"}
 *                   ]
 *         },
 *         "metadata":{
 *           "q": "/organizations/getOrganizationMembers"
 *         }
 *     }
 *
 * Error Response:
 *     {
 *         "data":{
 *                   "errorCode":500,
 *                   "errorMessage":"user: 'id@clients', name: 'null', not in role Owner or Admin of organization: 'specifiedOrganizationName'"
 *         },
 *         "metadata":{
 *                      "q":"/io.scalecube.services.error/500"
 *         }
 *     }
 *
 * @apiErrorExample{json} HTTP
 * Request:
 * https://localhost:port/organizations/getOrganizationMembers (endpoint url)
 *
 * Body:
 *     {
 *         "token": {
 *                     "token":"Auth0-TOKEN"
 *         },
 *         "organizationId":"ORG-ID"
 *     }
 *
 * Response:
 *     {
 *                "members":[
 *                             {"id":"id@clients","role":"Owner"},
 *                             {"id":"id@clients","role":"Admin"},
 *                             {"id":"id@clients","role":"Member"}
 *                ]
 *     }
 *
 * Error Response:
 *     {
 *         "errorCode":500,
 *         "errorMessage":"user: 'id@clients', name: 'null', not in role Owner or Admin of organization: 'specifiedOrganizationName'"
 *     }
 */