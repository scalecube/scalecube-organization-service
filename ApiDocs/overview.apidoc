/**
  * @api . Getting Started
  * @apiName GettingStarted
  * @apiGroup Overview
  * @apiVersion 0.0.0-CURRENT
  * @apiDescription Organization service enable you to integrate the API in order to create and manage the organizations.
  * Besides the origin owner unique ability to create the organization there is a necessity for each organization member to achieve appropriate
  * managers' permission level (roles: Owner | Admin) granted by other managers of the relevant organization for management ability.
  * Thus each organization could be deleted or relevant credentials updated, authorized users could be invited to and removed from the relevant organization,
  * each member could get the info about the relevant organization and also to know the own membership in the all related organizations.
  * Organization managers could provide and delete the relevant API keys (permission level with appropriate assigned role: Owner | Admin | Member) which are
  * vital leverage (write or read permission provision) for the <a href="http://scalecube.io/configuration-service/index.html">Configuration service</a> management and security purpose.
  *
  * >Note: API keys assigned with some of the relevant roles (Owner | Admin | Member) are visible to organization members' similar roles only via
  *  permission level (role) in the specific Organization:
  *  ><br>-Owner could observe all accessible API keys
  *  ><br>-Admin could observe only the "Admin" and "Member" API keys
  *  ><br>-Member could observe only the "Member" API keys
  *
  * <b>Getting Started</b>
  *
  *
  * All API endpoints documented below are the integral part of <a href="http://scalecube.io/configuration-service/index.html">Configuration service</a> <a href="https://github.com/jivygroup/exchange/wiki/Configuration-&-Organization-services-host-addresses"><b>host address</b></a>.
  * <br> You can try out any query in realtime using our interactive API.
  * Actually service requires authentication, so there is a necessity to get the token issued via secured authority.
  * Thus, firstly we recommend to create an account in <a href="https://manage.auth0.com/"><b>Auth0</b></a> and issue the token whereby to perform the valid requests across all service endpoints.
  * In order to reach an effective security <a href="https://auth0.com/blog/navigating-rs256-and-jwks/"><b>RS256</b></a> algorithm should be used when signing the access tokens for this service API.
  *
  * <b>Validation</b> for the object entities is handled by <b>Scalecube</b> services and do the next upon the request object:
  * >~ ignores any excessive keys and values added besides the required parameters
  * ><br>~ doesn't ignore the keys duplicates and takes the last values which applied for each of the relevant key duplicate
  *
  */

  /**
  * @api . Transport protocols API
  * @apiName TransportProtocols
  * @apiGroup Overview
  * @apiVersion 0.0.0-CURRENT
  * @apiPermission Successful requests and responses
  * @apiDescription You are able to manage the service API through the three types of transport protocols which are supported.
  * <br>Upon relevant <a href="https://github.com/jivygroup/exchange/wiki/Configuration-&-Organization-services-host-addresses"><b>Host address</b></a> was set the <b>request</b> should contain the following structure according to transport protocol usage:
                      <ul>
  						  <b>Websocket (WS)</b>
                             <li> "q": The query of the relevant service name and method used </li>
                             <li> "sid": The stream identifier (couldn't be reused upon current stream connection is opened)</li>
                             <li> "d": The request data object (parameters and values) </li>
  						  <br><b>RSocket (RS)</b>
  						   <li> "metadata": object which contains "q": The query of the relevant service name and method used </li>
                             <li> "d": object: The request data (parameters and values) </li>
  						  <br><b>HTTP</b>
                             <li> "endpoint url": host address/serviceName/method </li>
                             <li> "method" request: POST </li>
                             <li> "headers": Content-Type application/json </li>
                             <li> "body" json: The request data object (parameters and values) </li>
                      </ul>

  * @apiParamExample {json} WebSocket:
                      Request:
                      {
                          "q": "/serviceName/method_name",
                          "sid":int,
                          "d": {
                                  "relevant request parameters and values"
                               }
                      }

                      Response:
                      {
                          "q":"/serviceName/method_name",
                          "sid":int,
                          "d":{
                                 "relevant response parameters and values"
                              }
                      }
                      {
                          "sig":1,
                          "sid":int
                      }

  * @apiParamExample {json} RSocket:
                      Request:
                      {
                         "metadata": {
                             "q": "/serviceName/method_name"
                                     },
                             "data": {
                                        "relevant request parameters and values"
                                     }
                      }

                      Response:
                      {
                          "data":{
                                    "relevant response parameters and values"
                          },
                          "metadata":{
                            "q": "/serviceName/method_name"
                          }
                      }
  * @apiParamExample {json} HTTP:
                      Request:
                      https://localhost:port/serviceName/method_name (endpoint url)

                      Body:
                      {
                         "relevant request parameters and values"
                      }

                      Response:
                      {
                         "relevant response parameters and values"
                      }
  */

 /**
   * @api  . Interactive API Explorer
   * @apiName InteractiveAPIExplorer
   * @apiGroup Overview
   * @apiVersion 0.0.0-CURRENT
   * @apiDescription <b>WebSocket and RSocket</b> transports are accessible to apply via in-house developed API Explorer called <b>Sandbox</b> thus to connect and run follow up the next steps:
   <ul>
                  <li> Navigate to the sandbox: <a href="http://scalecube.io/api-sandbox/app/index.html">Scalecube sandbox</a> </li>
                  <li> Click on the <b>Settings</b> button then set the relevant <a href="https://github.com/jivygroup/exchange/wiki/Configuration-&-Organization-services-host-addresses"><b>Host address</b></a> for the chosen <b>transport</b> </li>
                  <li> Click on <b>Import icon</b> and copy-paste the template.json file path for <a href="https://raw.githubusercontent.com/scalecube/scalecube-organization-service/master/API-Calls-examples.json">Organization service endpoints.json</a></li>
                  <li> Click on the <b>Connect</b> button (now you are connected to the environment) and push <b>Send</b> button to make your request</li>
   </ul>
 */